apiVersion: tempo.grafana.com/v1alpha1
kind: TempoStack
metadata:
  name: sample
  namespace: tempo-observability
spec:
  # extraConfig:
  #   tempo:
  #     server:
  #       grpc_server_max_recv_msg_size: <>
  #       grpc_server_max_send_msg_size: <>
  # observability:
  #   tracing:
  #     jaeger_agent_endpoint: 'localhost:6831'
  # observability:
  #   tracing:
  #     jaeger_agent_endpoint: 'localhost:6831'
  #     otlp_http_endpoint: 'http://localhost:4320'
  observability:
    metrics:
      createServiceMonitors: true
      createPrometheusRules: true
  resources:
    total:
      limits:
        memory: 2Gi
        cpu: 1000m
  search:
    maxDuration: 0s
    maxResultLimit: 20
  tenants:
    # static | openshift
    mode: openshift
    authentication:
      - tenantId: dev-id
        tenantName: dev
    # authentication:
    #   - tenantName: dev
    #     tenantId: "dev-id"
    #   - tenantName: prod
    #     tenantId: "prod-id"

  # tenants:
  #   mode: openshift
  #   authentication:
  #     - tenantName: dev
  #       tenantId: "1610b0c3-c509-4592-a256-a1871353dbfa"
  #     - tenantName: prod
  #       tenantId: "6094b0f1-711d-4395-82c0-30c2720c6648"


  retention:
    global:
      traces: 24h
  timeout: '30s'
  managementState: Managed
  template:
    gateway:
      enabled: true
    # queryFrontend:
    #   jaegerQuery:
    #     enabled: true
    #     ingress:
    #       type: route
    #       route:
    #         termination: edge
    querier:
      replicas: 1
      resources:
        limits:
          memory: 1Gi
          cpu: '1'
    queryFrontend:
      component:
        replicas: 1
        resources:
          limits:
            memory: 1Gi
            cpu: '1'
      jaegerQuery:
        enabled: true
        monitorTab:
          enabled: true
          prometheusEndpoint: "https://thanos-querier.openshift-monitoring.svc.cluster.local:9091"
  #
  replicationFactor: 1
  storageSize: 5Gi
  storage:
    secret:
      name: tempostack-dev-s3
      # azure | gcs | s3 (Amazon S3, MinIO or Red Hat ODF)
      type: s3
    tls:
      enabled: true
      caName: openshift-service-ca.crt
      #caName: tempo-sample-ca-bundle

  # template:
  #   gateway:
  #     enabled: true
  #   queryFrontend:
  #     jaegerQuery:
  #       enabled: true
  #       ingress:
  #         route:
  #           termination: edge
  #         type: route

# EOF